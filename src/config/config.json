{
    "componentList": [
        "DefImg",
        "Dialog",
        "Modal",
        "Popup",
        "Skeleton",
        "Toast"
    ],
    "configData": {
        "DefImg": {
            "mdContent": "<p>Dialog对话框 基建组件</p>\n<h2 id=\"api\">API</h2>\n<p>适用平台：WEB</p>\n<p>创建一个对话框，modal和alert都是基于dialog进行封装, 可以在此组件上添加拓展配置。</p>\n<h2 id=\"dialog\">Dialog</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>prefixCls</td>\n<td>组件的公用className前序</td>\n<td>string</td>\n<td>zds-dialog</td>\n</tr>\n<tr>\n<td>className</td>\n<td>定义dialog最外层元素的class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>boxClassName</td>\n<td>定义dialog的body class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>maskClassName</td>\n<td>定义dialog的mask class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式dialog的body的样式</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>maskStyle</td>\n<td>定义dialog的mask的样式</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>title</td>\n<td>dialog显示的title</td>\n<td>JSXElement</td>\n<td>无</td>\n</tr>\n<tr>\n<td>content</td>\n<td>dialog显示的footer</td>\n<td>JSXElement</td>\n<td>无</td>\n</tr>\n<tr>\n<td>visible</td>\n<td>控制dialog执行动画</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>closeCallback</td>\n<td>控制dialog关闭的方法</td>\n<td>func</td>\n<td>false无</td>\n</tr>\n<tr>\n<td>showCloseBtn</td>\n<td>是否显示关闭按钮</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>transitionName</td>\n<td>动画弹出名称</td>\n<td>string</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>默认dialog会直接显示，<code>visible</code>是用来控制dialog是否执行动画效果，当<code>visible</code>为<code>true</code>时会添加<code>enter</code>动画钩子，当为<code>true</code>改为<code>false</code>的时候会执行<code>leave</code>动画钩子。</p>\n<p>简单的例子</p>\n<pre><code class=\"language-JavaScript\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span>\n    <span class=\"hljs-attr\">visible</span>=<span class=\"hljs-string\">{true}</span>\n    <span class=\"hljs-attr\">maskClose</span>=<span class=\"hljs-string\">{true}</span>\n    <span class=\"hljs-attr\">closeCallback</span>=<span class=\"hljs-string\">{console.log(123)}</span>\n&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'modal-text'</span>&gt;</span>这是一个文案...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span></code></pre>\n<p>关于<code>transitionName</code>有固定的样式配置。如果只是传入字符串，会在显示时添加对应class字符串，关闭时去掉对应的class字符串，但是如果传入的是一个对象，必须提供4个动画钩子：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// todo</span>\n<span class=\"hljs-comment\">// 自定义动画钩子</span>\ntransitionName={{\n    enter: 'zds-123-enter',\n    enterActive: 'zds-123-enter-active',\n    leave: 'zds-123-leave',\n    leaveActive: 'zds-123-leave-active'\n}}</code></pre>\n",
            "config": {
                "title": "Dialog",
                "key": "Dialog",
                "subTitle": "对话框",
                "category": "Feedback",
                "categoryName": "Feedback"
            }
        },
        "Dialog": {
            "mdContent": "<p>Dialog 基础对话框</p>\n<h2 id=\"api\">API</h2>\n<p>适用平台：WEB</p>\n<p>创建一个对话框，modal是基于dialog进行封装, 可以在此组件上添加拓展配置, 作为基建组件。</p>\n<h2 id=\"dialog\">Dialog</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>prefixCls</td>\n<td>组件的公用className前序</td>\n<td>string</td>\n<td>danarrr-dialog</td>\n</tr>\n<tr>\n<td>className</td>\n<td>定义dialog最外层元素的class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>boxClassName</td>\n<td>定义dialog的body class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>maskClassName</td>\n<td>定义dialog的mask class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式dialog的body的样式</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>maskStyle</td>\n<td>定义dialog的mask的样式</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>title</td>\n<td>dialog显示的title</td>\n<td>JSXElement</td>\n<td>无</td>\n</tr>\n<tr>\n<td>content</td>\n<td>dialog显示的footer</td>\n<td>JSXElement</td>\n<td>无</td>\n</tr>\n<tr>\n<td>maskCloseable</td>\n<td>点击mask层可关闭弹窗</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>visible</td>\n<td>控制dialog执行动画</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>closeCallback</td>\n<td>控制dialog关闭的方法</td>\n<td>func</td>\n<td>false无</td>\n</tr>\n<tr>\n<td>showCloseBtn</td>\n<td>是否显示关闭按钮</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>transitionName</td>\n<td>动画弹出名称</td>\n<td>string</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>简单的例子</p>\n<pre><code class=\"language-JavaScript\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span>\n    <span class=\"hljs-attr\">visible</span>=<span class=\"hljs-string\">{true}</span>\n    <span class=\"hljs-attr\">maskClose</span>=<span class=\"hljs-string\">{true}</span>\n    <span class=\"hljs-attr\">closeCallback</span>=<span class=\"hljs-string\">{console.log(123)}</span>\n&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'modal-text'</span>&gt;</span>这是一个文案...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span></code></pre>\n",
            "config": {
                "title": "Dialog",
                "key": "Dialog",
                "subTitle": "对话框",
                "category": "Feedback",
                "categoryName": "Feedback"
            }
        },
        "Modal": {
            "mdContent": "<p>Modal 对话框</p>\n<h2 id=\"api\">API</h2>\n<p>适用平台：WEB</p>\n<p>用作显示系统的重要信息，并请求用户进行操作反馈，eg：删除某个重要内容时，弹出 Modal 进行二次确认。</p>\n<h2 id=\"-\">规则</h2>\n<ul>\n<li>尽可能少用会打断用户操作。</li>\n<li>用户按钮控制在2-3个，此组件三个以上按钮展示不同样式。</li>\n<li>用户使用习惯, 把常用点击按钮放在右侧，取消按钮始终放在右侧。</li>\n</ul>\n<h2 id=\"modal\">Modal</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>prefixCls</td>\n<td>组件的公用className前序</td>\n<td>string</td>\n<td>zds-dialog</td>\n</tr>\n<tr>\n<td>className</td>\n<td>定义dialog最外层元素的class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>boxClassName</td>\n<td>定义dialog的body class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>maskClassName</td>\n<td>定义dialog的mask class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>maskTransitionName</td>\n<td>定义dialog的mask 的动画class标识</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>transitionName</td>\n<td>定义dialog的mask 的动画class标识</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式dialog的body的样式</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>maskStyle</td>\n<td>定义dialog的mask的样式</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>title</td>\n<td>dialog显示的title</td>\n<td>JSXElement</td>\n<td>无</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>dialog显示的footer</td>\n<td>JSXElement</td>\n<td>无</td>\n</tr>\n<tr>\n<td>visible</td>\n<td>控制dialog执行动画</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>maskClose</td>\n<td>点击mask触发关闭</td>\n<td>boolean</td>\n<td>false无</td>\n</tr>\n<tr>\n<td>transparent</td>\n<td>是否不创建mask</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>closeCallback</td>\n<td>控制dialog关闭的方法</td>\n<td>function</td>\n<td>无</td>\n</tr>\n<tr>\n<td>boxAnimated</td>\n<td>box动画事件，返回一个参数说明当前结束的动画属于enter还是leave</td>\n<td>function</td>\n<td></td>\n</tr>\n<tr>\n<td>maskAnimated</td>\n<td>mask动画事件，返回一个参数说明当前结束的动画属于enter还是leave</td>\n<td>function</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"-\">简单的例子</h2>\n<h3 id=\"-\">基本配置</h3>\n<pre><code class=\"language-javascript\">const configProps = {\n    title: <span class=\"hljs-string\">'只有标题的dialog'</span>, \n    buttons:[{ \n        text: <span class=\"hljs-string\">'关闭'</span>, \n        onPress: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> Promise(<span class=\"hljs-function\"><span class=\"hljs-params\">( resolve )</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">this</span>.closeModal();})\n    }],\n}</code></pre>\n<h3 id=\"-\">全屏模态框</h3>\n<pre><code class=\"language-javascript\">const fullModalProps ={\n<span class=\"hljs-symbol\">    maskCloseable:</span> true, \n<span class=\"hljs-symbol\">    children:</span> <span class=\"hljs-string\">\"正文正文正文正文正文正文正文正文正文正文正文正文\"</span>,\n<span class=\"hljs-symbol\">    title:</span> <span class=\"hljs-string\">\"输入标题。。\"</span>,\n<span class=\"hljs-symbol\">    modalType:</span> <span class=\"hljs-string\">\"full\"</span>,\n}</code></pre>\n<pre><code class=\"language-html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n    </span></span><span class=\"hljs-template-variable\">{...configProps}</span><span class=\"xml\"><span class=\"hljs-tag\">\n    <span class=\"hljs-attr\">visible</span>=</span></span><span class=\"hljs-template-variable\">{this.state.modalVisible}</span><span class=\"xml\"><span class=\"hljs-tag\">\n    &gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span></span></code></pre>\n",
            "config": {
                "title": "Modal",
                "key": "Modal",
                "subTitle": "对话框",
                "category": "Feedback",
                "categoryName": "Feedback"
            }
        },
        "Popup": {
            "mdContent": "<p>Popup 滑动对话框</p>\n<h2 id=\"api\">API</h2>\n<p>适用平台：WEB</p>\n<p>创建一个具有动画效果的对话框。</p>\n<h2 id=\"popup\">Popup</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>prefixCls</td>\n<td>组件的公用className前序</td>\n<td>string</td>\n<td>danarrr-popup</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>弹框弹出方向</td>\n<td>string</td>\n<td>bottom</td>\n</tr>\n</tbody></table>\n<p>简单的例子</p>\n<pre><code class=\"language-javascript\">const configProps = {\n    button<span class=\"hljs-variable\">s:</span>[{ \n    tex<span class=\"hljs-variable\">t:</span> <span class=\"hljs-string\">'关闭'</span>,\n\n    }],\n    direction: <span class=\"hljs-string\">'right'</span>,\n    conten<span class=\"hljs-variable\">t:</span> <span class=\"hljs-string\">\"正文\"</span>,\n    title: <span class=\"hljs-string\">\"输入标题。。\"</span>,\n}</code></pre>\n<pre><code class=\"language-html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popup</span>\n    </span></span><span class=\"hljs-template-variable\">{...configProps}</span><span class=\"xml\"><span class=\"hljs-tag\">\n    <span class=\"hljs-attr\">visible</span>=</span></span><span class=\"hljs-template-variable\">{this.state.popupVisible}</span><span class=\"xml\"><span class=\"hljs-tag\">\n    <span class=\"hljs-attr\">closeCallback</span>=</span></span><span class=\"hljs-template-variable\">{() =&gt; { this.setState( { popupVisible: false }</span><span class=\"xml\"><span class=\"hljs-tag\"> ); }}\n&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"modal-text\"</span>&gt;</span>这是一个文案...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popup</span>&gt;</span>&gt;</span></code></pre>\n",
            "config": {
                "title": "Popup",
                "key": "Popup",
                "subTitle": "对话框",
                "category": "Feedback",
                "categoryName": "Feedback"
            }
        },
        "Skeleton": {
            "mdContent": "<p>基建对话框</p>\n<h2 id=\"api\">API</h2>\n<p>适用平台：WEB</p>\n<p>创建一个对话框，modal和alert都是基于dialog进行封装, 可以在此组件上添加拓展配置。</p>\n<h2 id=\"skeleton\">Skeleton</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>prefixCls</td>\n<td>组件的公用className前序</td>\n<td>string</td>\n<td>danarr-skeleton</td>\n</tr>\n<tr>\n<td>className</td>\n<td>定义skeleton最外层元素的class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>style</td>\n<td>定义skeleton的Box/Item class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>简单的例子</p>\n<pre><code class=\"language-JavaScript\"> &lt;Skeleton&gt;\n    &lt;Skeleton.Box style={{ marginTop: <span class=\"hljs-string\">'20px'</span>,<span class=\"hljs-built_in\">height</span>: <span class=\"hljs-string\">'50px'</span>, <span class=\"hljs-built_in\">width</span>: <span class=\"hljs-string\">'50%'</span> }}&gt; \n    &lt;/Skeleton.Box&gt;\n\n    &lt;Skeleton.Item style={{ marginTop: <span class=\"hljs-string\">'20px'</span>,<span class=\"hljs-built_in\">height</span>: <span class=\"hljs-string\">'34px'</span>, <span class=\"hljs-built_in\">width</span>: <span class=\"hljs-string\">'100%'</span> }}/&gt; \n    &lt;Skeleton.Item style={{ marginTop: <span class=\"hljs-string\">'20px'</span>,<span class=\"hljs-built_in\">height</span>: <span class=\"hljs-string\">'54px'</span>, <span class=\"hljs-built_in\">width</span>: <span class=\"hljs-string\">'100%'</span> }} /&gt;\n&lt;/Skeleton&gt;</code></pre>\n",
            "config": {
                "title": "Skeleton",
                "key": "Skeleton",
                "subTitle": "对话框",
                "category": "Feedback",
                "categoryName": "Feedback"
            }
        },
        "Toast": {
            "mdContent": "<p>基建对话框</p>\n<h2 id=\"api\">API</h2>\n<p>适用平台：WEB</p>\n<p>创建一个对话框，modal和alert都是基于dialog进行封装, 可以在此组件上添加拓展配置。</p>\n<h2 id=\"dialog\">Dialog</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>prefixCls</td>\n<td>组件的公用className前序</td>\n<td>string</td>\n<td>zds-dialog</td>\n</tr>\n<tr>\n<td>className</td>\n<td>定义dialog最外层元素的class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>boxClassName</td>\n<td>定义dialog的body class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>maskClassName</td>\n<td>定义dialog的mask class</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>maskTransitionName</td>\n<td>定义dialog的mask 的动画class标识</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>transitionName</td>\n<td>定义dialog的mask 的动画class标识</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式dialog的body的样式</td>\n<td>object</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>maskStyle</td>\n<td>定义dialog的mask的样式</td>\n<td>string</td>\n<td>无</td>\n</tr>\n<tr>\n<td>title</td>\n<td>dialog显示的title</td>\n<td>JSXElement</td>\n<td>无</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>dialog显示的footer</td>\n<td>JSXElement</td>\n<td>无</td>\n</tr>\n<tr>\n<td>visible</td>\n<td>控制dialog执行动画</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>maskClose</td>\n<td>点击mask触发关闭</td>\n<td>boolean</td>\n<td>false无</td>\n</tr>\n<tr>\n<td>transparent</td>\n<td>是否不创建mask</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>closeCallback</td>\n<td>控制dialog关闭的方法</td>\n<td>function</td>\n<td>无</td>\n</tr>\n<tr>\n<td>boxAnimated</td>\n<td>box动画事件，返回一个参数说明当前结束的动画属于enter还是leave</td>\n<td>function</td>\n<td></td>\n</tr>\n<tr>\n<td>maskAnimated</td>\n<td>mask动画事件，返回一个参数说明当前结束的动画属于enter还是leave</td>\n<td>function</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>默认dialog会直接显示，<code>visible</code>是用来控制dialog是否执行动画效果，当<code>visible</code>为<code>true</code>时会添加<code>enter</code>动画钩子，当为<code>true</code>改为<code>false</code>的时候会执行<code>leave</code>动画钩子。</p>\n<p>简单的例子</p>\n<pre><code class=\"language-JavaScript\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span>\n    <span class=\"hljs-attr\">visible</span>=<span class=\"hljs-string\">{true}</span>\n    <span class=\"hljs-attr\">maskClose</span>=<span class=\"hljs-string\">{true}</span>\n    <span class=\"hljs-attr\">closeCallback</span>=<span class=\"hljs-string\">{console.log(123)}</span>\n&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">'modal-text'</span>&gt;</span>这是一个文案...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span></code></pre>\n<p>关于<code>transitionName</code>和<code>maskTransitionName</code>有固定的样式配置。如果只是传入字符串，会在显示时添加对应class字符串，关闭时去掉对应的class字符串，但是如果传入的是一个对象，必须提供4个动画钩子：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 内置了一些动画钩子</span>\n<span class=\"hljs-string\">zoom:</span> {\n<span class=\"hljs-symbol\">    enter:</span> <span class=\"hljs-string\">'zds-zoom-enter'</span>,\n<span class=\"hljs-symbol\">    enterActive:</span> <span class=\"hljs-string\">'zds-zoom-enter-active'</span>,\n<span class=\"hljs-symbol\">    leave:</span> <span class=\"hljs-string\">'zds-zoom-leave'</span>,\n<span class=\"hljs-symbol\">    leaveActive:</span> <span class=\"hljs-string\">'zds-zoom-leave-active'</span>\n},\n<span class=\"hljs-string\">fade:</span> {\n<span class=\"hljs-symbol\">    enter:</span> <span class=\"hljs-string\">'zds-fade-enter'</span>,\n<span class=\"hljs-symbol\">    enterActive:</span> <span class=\"hljs-string\">'zds-fade-enter-active'</span>,\n<span class=\"hljs-symbol\">    leave:</span> <span class=\"hljs-string\">'zds-fade-leave'</span>,\n<span class=\"hljs-symbol\">    leaveActive:</span> <span class=\"hljs-string\">'zds-fade-leave-active'</span>\n}\n\n<span class=\"hljs-comment\">// 自定义动画钩子</span>\ntransitionName={{\n<span class=\"hljs-symbol\">    enter:</span> <span class=\"hljs-string\">'zds-123-enter'</span>,\n<span class=\"hljs-symbol\">    enterActive:</span> <span class=\"hljs-string\">'zds-123-enter-active'</span>,\n<span class=\"hljs-symbol\">    leave:</span> <span class=\"hljs-string\">'zds-123-leave'</span>,\n<span class=\"hljs-symbol\">    leaveActive:</span> <span class=\"hljs-string\">'zds-123-leave-active'</span>\n}}</code></pre>\n",
            "config": {
                "title": "Toast",
                "key": "Toast",
                "subTitle": "对话框",
                "category": "Feedback",
                "categoryName": "Feedback"
            }
        }
    },
    "categoryData": {
        "index": {
            "mdContent": "<h1 id=\"erc-design-mobile\">erc-design-mobile</h1>\n<p>一个基于React框架开发的UI组件库。</p>\n<h2 id=\"-\">当前版本号</h2>\n<ul>\n<li>v1.1.6 </li>\n</ul>\n<h2 id=\"-\">特性</h2>\n<ul>\n<li>开箱即用的高质量React组件</li>\n<li>健全的文档API</li>\n<li>提供可配置可扩展组件</li>\n</ul>\n<h2 id=\"-\">安装</h2>\n<pre><code class=\"language-javascript\">npm install erc-<span class=\"hljs-built_in\">design</span>-mobile --<span class=\"hljs-keyword\">save</span>-dev</code></pre>\n<h2 id=\"-\">使用示例</h2>\n<p>只支持es6 import引入。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { Modal } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'erc-design-mobile'</span>;</code></pre>\n"
        }
    }
}