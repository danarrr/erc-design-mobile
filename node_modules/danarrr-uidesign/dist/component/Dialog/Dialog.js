'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _prefix = require('./../../_utils/prefix');

var _prefix2 = _interopRequireDefault(_prefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// 基建组件
var Dialog = function (_React$Component) {
    _inherits(Dialog, _React$Component);

    function Dialog(props) {
        _classCallCheck(this, Dialog);

        var _this = _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call(this, props));

        _this.props = props;

        return _this;
    }

    _createClass(Dialog, [{
        key: 'createDialogMask',
        value: function createDialogMask() {
            var _props = this.props,
                maskClassName = _props.maskClassName,
                maskStyle = _props.maskStyle,
                maskCloseable = _props.maskCloseable,
                closeFn = _props.closeFn,
                prefixCls = _props.prefixCls,
                visible = _props.visible;


            return visible ? _react2.default.createElement('div', {
                className: (0, _classnames2.default)(prefixCls + '__mask', maskClassName),
                style: maskStyle,
                onClick: function onClick() {
                    if (maskCloseable) {
                        closeFn();
                    }
                },
                onTouchMove: function onTouchMove(e) {
                    e.preventDefault();
                }
            }) : _react2.default.createElement('div', null);
        }
    }, {
        key: 'close',
        value: function close() {
            this.setState({
                visible: false
            });
        }
    }, {
        key: 'createDialogBody',
        value: function createDialogBody() {
            var _props2 = this.props,
                title = _props2.title,
                children = _props2.children,
                footer = _props2.footer,
                boxClassName = _props2.boxClassName,
                visible = _props2.visible,
                content = _props2.content,
                prefixCls = _props2.prefixCls,
                transitionName = _props2.transitionName;


            return _react2.default.createElement(
                'div',
                { className: (0, _classnames2.default)(prefixCls + '__body', boxClassName, transitionName), visible: visible },
                title,
                children || content,
                footer
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                prefixCls = _props3.prefixCls,
                className = _props3.className,
                style = _props3.style,
                visible = _props3.visible;

            console.log("Dialog visible: ", visible);
            // if(visible){ scrollThrough.fixBody()} // 滑动穿透
            return visible ? _react2.default.createElement(
                'div',
                { style: style, className: (0, _classnames2.default)('' + prefixCls, className) },
                this.createDialogMask(),
                this.createDialogBody()
            ) : _react2.default.createElement('div', null);
        }
    }]);

    return Dialog;
}(_react2.default.Component);

// 布局分为三个部分 body mask box
// 然后配置动画
// 基建  后面几个组件基于这个函数扩展
// componentdidcatch
// 防抖节流
// 滑动穿透 todo
// 同时引入的问题
// mask冒泡


Dialog.defaultProps = {
    prefixCls: _prefix2.default.cls + '-dialog',
    className: '',
    boxClassName: '',
    maskClassName: '',
    style: {},
    maskStyle: {},
    title: '',
    content: '',
    visible: false,
    maskCloseable: false,
    closeCallback: {}, // 控制dialog关闭的方法
    showCloseBtn: true,
    transitionName: '' //动画弹出命名
    // useLock: true //默认使用滑动穿透 todo滑动穿透怎么解决
};
Dialog.propTypes = {
    className: _propTypes2.default.string, // 自定义最外层元素的className
    boxClassName: _propTypes2.default.string, //定义dialog最外层元素的class
    maskClassName: _propTypes2.default.string, //定义dialog的mask class	
    style: _propTypes2.default.object, // 自定义样式dialog的body的样式	
    maskStyle: _propTypes2.default.object, //自定义样式mask的body的样式
    title: _propTypes2.default.string,
    closeCallback: _propTypes2.default.func, // 控制dialog关闭的方法
    visible: _propTypes2.default.bool,
    maskCloseable: _propTypes2.default.bool,
    showCloseBtn: _propTypes2.default.bool,
    isFixScrollThrough: _propTypes2.default.bool,
    confirmBtn: _propTypes2.default.func
};
exports.default = Dialog;